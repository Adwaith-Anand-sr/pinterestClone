/**
 * Removes the first `n` items of an array.
 *
 * @param n - The number of items to remove.
 * @param array - The array.z
 * @returns The remaining items.
 */
declare function drop<T>(n: number, array: readonly T[]): T[];

/**
 * Splits an array into groups of equal size.
 *
 * @param array - The array.
 * @param n - The size of each group.
 * @returns The array split into groups.
 */
declare function groups<T>(array: readonly T[], n: number): T[][];

/**
 * Returns the first item of an array.
 *
 * @param array - The array.
 * @returns The first item.
 */
declare function head(array: readonly []): undefined;
declare function head<T>(array: readonly T[]): T;

/**
 * Returns all but the last item of an array.
 *
 * @param array - The array.
 * @returns The array without the last item.
 */
declare function init<T>(array: readonly T[]): T[];

/**
 * Returns the last item of an array.
 *
 * @param array - The array.
 * @returns The last item.
 */
declare function last(array: readonly []): undefined;
declare function last<T>(array: readonly T[]): T;

/**
 * Splits an array into two based on a predicate function.
 *
 * @param array - The array.
 * @param filter - The predicate function.
 * @returns The tuple of values that satisfy the predicate and those that don't.
 */
declare function partition<T, U = T>(array: readonly (T | U)[], filter: (current: T | U, idx: number, array: readonly (T | U)[]) => boolean): [T[], U[]];

/**
 * Generates a range of numbers.
 *
 * @param start - The inclusive start value.
 * @param stop - The exlusive stop value.
 * @param step - The step to increment by.
 * @returns The range of numbers.
 */
declare function range(stop: number): number[];
declare function range(start: number, stop: number, step?: number): number[];

/**
 * Randomly shuffles items in an array.
 *
 * @param array - The array.
 * @returns A copy of the array with its items randomly shuffled.
 */
declare function shuffle<T>(array: T[]): T[];

/**
 * Splits an array into two at a specified index.
 *
 * @param array - The array.
 * @param i - The position to split at.
 * @returns The tuple of values before and after the split.
 */
declare function splitArray<T>(array: readonly T[], i: number): [T[], T[]];

/**
 * Returns all but the first item of an array.
 *
 * @param array - The array.
 * @returns The array without the first item.
 */
declare function tail<T>(array: readonly T[]): T[];

/**
 * Returns the first `n` items of an array.
 *
 * @param n - The number of items to return.
 * @param array - The array.
 * @returns The first `n` items.
 */
declare function take<T>(n: number, array: readonly T[]): T[];

type Arrayable<T> = T | Array<T>;
type Nullable<T> = T | null | undefined;
type Fn<T = any> = (...args: any[]) => T;
type VoidFn = Fn<void>;
type Obj<V = unknown> = Record<string | symbol | number, V>;

/**
 * Wraps a single value in an array, if not already an array.
 *
 * @param maybeArray - The value to wrap, or the existing array.
 * @returns The item wrapped in an array, or the provided array.
 */
declare function toArray<T>(maybeArray: Nullable<Arrayable<T>>): T[];

/**
 * Removes duplicate primitive values from an array.
 *
 * @param array - The array.
 * @returns The array without duplicated primitive values.
 */
declare function uniq<T>(array: readonly T[]): T[];

/**
 * Copies the provided string to the user's clipboard.
 *
 * @param str - The string to be copied to the clipboard.
 */
declare function copyToClipboard(str: string): void;

interface ScrollConfig {
    to: Element | string | number;
    offset?: number;
    duration?: number;
    container?: Element | string | null;
}
/**
 * Scrolls the page or provided container to a target element or y-coordinate.
 *
 * @param config - The scroll config.
 * @param config.to - The scroll target.
 * @param config.offset - The offset from the scroll target (in px).
 * @param config.duration - The scroll duration (in ms).
 * @param config.container - The container to scroll in.
 */
declare function scroll({ to, offset, duration, container }: ScrollConfig): void;

/**
 * Prevents function execution until it hasn't been called for a specified time period.
 *
 * @param fn - The function.
 * @param delay - The time period (in ms).
 * @returns The debounced function.
 */
declare function debounce(fn: Fn<void>, delay: number): Fn<void>;

/**
 * Optimises subsequent calls of a function by caching return values.
 *
 * @param fn - The function.
 * @returns The memoised function.
 */
declare function memoise<T>(fn: Fn<T>): Fn<T>;
declare const memoize: typeof memoise;

/**
 * Enforces that a function is only callable one time.
 *
 * @param fn - The function.
 * @returns The one-time callable function.
 */
declare function once(fn: Fn<void>): Fn<void>;

/**
 * Prevents function execution for a specified time period after it was last called.
 *
 * @param fn - The function.
 * @param limit - The time period.
 * @returns The throttled function.
 */
declare function throttle(fn: Fn<void>, limit: number): Fn<void>;

/**
 * Identifies if a value is an array.
 *
 * @param val - The value.
 * @returns If the value is an array.
 */
declare function isArray(val: unknown): val is any[];

/**
 * Identifies if a value is a boolean.
 *
 * @param val - The value.
 * @returns If the value is a boolean.
 */
declare function isBoolean(val: unknown): val is boolean;

/**
 * Identifies if the code is being run in a browser.
 *
 * @returns If the code is being run in a browser.
 */
declare function isBrowser(): boolean;

/**
 * Identifies if a value is defined.
 *
 * @param val - The value.
 * @returns If the value is defined.
 */
declare function isDefined<T>(val: T): val is Exclude<T, null | undefined>;

/**
 * Identifies if a value is an empty array.
 *
 * @param val - The value.
 * @returns If the value is an empty array.
 */
declare function isEmptyArray(val: unknown): val is [];

/**
 * Identifies if a value is an empty object.
 *
 * @param val - The value.
 * @returns If the value is an empty object.
 */
declare function isEmptyObject(val: unknown): val is Obj<never>;

/**
 * Identifies if a value is a function.
 *
 * @param val - The value.
 * @returns If the value is a function.
 */
declare function isFunction<T extends Fn>(val: unknown): val is T;

/**
 * Identifies if a value is null.
 *
 * @param val - The value.
 * @returns If the value is null.
 */
declare function isNull(val: unknown): val is null;

/**
 * Identifies if a value is a number.
 *
 * @param val - The value.
 * @returns If the value is a number.
 */
declare function isNumber(val: unknown): val is number;

/**
 * Identifies if a value is an object.
 *
 * @param val - The value.
 * @returns If the value is an object.
 */
declare function isObject(val: unknown): val is Obj;

/**
 * Identifies if a value is an array, an object, a date, or null.
 *
 * @param val - The value.
 * @returns If the value is an array, an object, a date, or null.
 */
declare function isObjectLike(val: unknown): val is object;

/**
 * Identifies if a value is a string.
 *
 * @param val - The value.
 * @returns If the value is a string.
 */
declare function isString(val: unknown): val is string;

/**
 * Identifies if the code is being run on a touch device.
 *
 * @returns If the code is being run on a touch device.
 */
declare function isTouchDevice(): boolean;

/**
 * Identifies if a value is undefined.
 *
 * @param val - The value.
 * @returns If the value is undefined.
 */
declare function isUndefined(val: unknown): val is undefined;

/**
 * Identifies if a value is the global window.
 *
 * @param val - The value.
 * @returns If the value is the global window.
 */
declare function isWindow(val: unknown): val is Window;

/**
 * Does nothing.
 *
 * @returns Nothing.
 */
declare function noop(): void;

/**
 * Halts thread execution for a specified time period.
 *
 * @param duration - The time period (in ms).
 * @returns The halting promise.
 */
declare function sleep(duration: number): Promise<void>;

/**
 * Generates a random string of a specified length.
 *
 * @param length - The length of the randomly generated string.
 * @returns The randomly generated string.
 */
declare function uuid(length?: number): string;

/**
 * Returns the average of a number array.
 *
 * @param ns - The number array.
 * @returns The average.
 */
declare function average(ns: readonly number[]): number;

/**
 * Rounds a number up to the nearest multiple of the specified factor.
 *
 * @param n - The number to round up.
 * @param factor - The factor used for rounding.
 * @returns The rounded number.
 */
declare function ceil(n: number, factor?: number): number;

/**
 * Restricts a number between two bounds.
 *
 * @param n - The number to restrict.
 * @param min - The minimum bound.
 * @param max - The maximum bound.
 * @returns The number restricted between the specified bounds.
 */
declare function clamp(n: number, min: number, max: number): number;

/**
 * Rounds a number down to the nearest multiple of the specified factor.
 *
 * @param n - The number to round down.
 * @param factor - The factor used for rounding.
 * @returns The rounded number.
 */
declare function floor(n: number, factor?: number): number;

/**
 * Identifies if a number is even.
 *
 * @param n - The number.
 * @returns If the number is even.
 */
declare function isEven(n: number): boolean;

/**
 * Identifies if a number is odd.
 *
 * @param n - The number.
 * @returns If the number is odd.
 */
declare function isOdd(n: number): boolean;

/**
 * Returns the maximum number of provided numbers or array of numbers.
 *
 * @param ns - The numbers or the array of numbers.
 * @returns The maximum number.
 */
declare function max(...ns: number[] | [number[]]): number;

/**
 * Returns the minimum number of provided numbers or array of numbers.
 *
 * @param ns - The numbers or the array of numbers.
 * @returns The minimum number.
 */
declare function min(...ns: number[] | [number[]]): number;

/**
 * Returns the product of a number array.
 *
 * @param ns - The number array.
 * @returns The product.
 */
declare function product(ns: readonly number[]): number;

/**
 * Rolls an n-sided die.
 *
 * @param n - The number of sides on the die.
 * @returns If the die roll was 0.
 */
declare function randomChance(n: number): boolean;

/**
 * Generates a random integer between bounds.
 *
 * @param min - The inclusive minimum bound.
 * @param max - The exclusive maximum bound.
 * @returns The random integer.
 */
declare function randomNumber(max: number): number;
declare function randomNumber(min: number, max: number): number;

/**
 * Rounds a number to the nearest multiple of the specified factor.
 *
 * @param n - The number to round.
 * @param factor - The factor used for rounding.
 * @returns The rounded number.
 */
declare function round(n: number, factor?: number): number;

/**
 * Returns the sum of a number array.
 *
 * @param ns - The number array.
 * @returns The sum.
 */
declare function sum(ns: readonly number[]): number;

/**
 * Rounds a number to a specified number of decimal places.
 *
 * @param n - The number to round.
 * @param decimalPlaces - The number of decimal places to round to.
 * @returns The rounded number.
 */
declare function toDp(n: number, decimalPlaces?: number): number;

/**
 * Converts a string which contains a number into the number itself.
 *
 * @param str - The string.
 * @param extensions - Additional symbols to consider in the conversion.
 * @returns The number.
 */
declare function toNumber(str: string, extensions?: string[]): number;

/**
 * Deep clones an array or object.
 *
 * @param input - The array or object to clone.
 * @returns A deep clone of the input array or object.
 */
declare function clone<T>(input: T): T;

/**
 * Strict-typed, shorthand `Object.entries`
 *
 * @param obj - The object to extract the entries from.
 * @returns The entries.
 */
declare function es<T extends object>(obj: T): [keyof T, T[keyof T]][];

/**
 * Strict-typed, shorthand `Object.keys`
 *
 * @param obj - The object to extract the keys from.
 * @returns The keys.
 */
declare function ks<T extends object>(obj: T): Array<`${keyof T & (string | number | boolean | null | undefined)}`>;

/**
 * Shorthand `Object.values`
 *
 * @param obj - The object to extract the values from.
 * @returns The values.
 */
declare function vs<T>(obj: Obj<T>): T[];

/**
 * Capitalises the first letter of one word, or all words, in a string.
 *
 * @param str - The string.
 * @param allWords - If all words should be capitalised.
 * @param delimiter - The delimiter to split the string by.
 * @returns The capitalised string.
 */
declare function capitalise(str: string, allWords?: boolean, delimiter?: string): string;
declare const capitalize: typeof capitalise;

/**
 * Separates a string into an array of characters.
 *
 * @param str - The string.
 * @returns The string's characters.
 */
declare function chars(str: string): string[];

/**
 * Identifies strings which only contain whitespace.
 *
 * @param str - The string.
 * @returns If the string is blank.
 */
declare function isBlank(str: string): boolean;

/**
 * Identifies empty strings.
 *
 * @param str - The string.
 * @returns If the string is empty.
 */
declare function isEmpty(str: string): boolean;

/**
 * Replaces a character at a specified index in a string with a new character.
 *
 * @param str - The string.
 * @param i - The index of the character to replace.
 * @param char - The character to replace with.
 * @returns The modified string with the character replaced.
 */
declare function replaceChar(str: string, i: number, char: string): string;

/**
 * Splits a string into two at a specified index.
 *
 * @param str - The string.
 * @param i - The position to split at.
 * @returns The tuple of strings before and after the split.
 */
declare function splitString(str: string, i: number): [string, string];

/**
 * Converts a kebab case string to camel case.
 *
 * @param str - The kebab case string.
 * @returns The camel case string.
 */
declare function toCamel(str: string): string;

/**
 * Converts a camel case string to kebab case.
 *
 * @param str - The camel case string.
 * @returns The kebab case string.
 */
declare function toKebab(str: string): string;

/**
 * Adds the respective ordinal suffix (-st, -nd, -rd or -th) to a number.
 *
 * @param n - The number.
 * @returns The number with the ordinal suffix appended.
 */
declare function toOrdinal(n: number): string;

/**
 * Converts a given number to Roman numerals.
 *
 * @param n - The number to convert to Roman numerals.
 * @param lowerCase - If the numerals should be in lowercase.
 * @returns The Roman numeral representation of the given number.
 */
declare function toRomanNumerals(n: number, lowerCase?: boolean): string;

/**
 * Truncates a string to a provided length.
 *
 * @param str - The string.
 * @param length - The length.
 * @param suffix - The suffix to apply after truncation.
 * @returns The truncated string.
 */
declare function truncate(str: string, length: number, suffix?: string): string;

/**
 * Joins an array of characters into a string.
 *
 * @param chars - The characters.
 * @returns The string.
 */
declare function unchars(chars: string[]): string;

export { type Arrayable, type Fn, type Nullable, type Obj, type VoidFn, average, capitalise, capitalize, ceil, chars, clamp, clone, copyToClipboard, debounce, drop, es, floor, groups, head, init, isArray, isBlank, isBoolean, isBrowser, isDefined, isEmpty, isEmptyArray, isEmptyObject, isEven, isFunction, isNull, isNumber, isObject, isObjectLike, isOdd, isString, isTouchDevice, isUndefined, isWindow, ks, last, max, memoise, memoize, min, noop, once, partition, product, randomChance, randomNumber, range, replaceChar, round, scroll, shuffle, sleep, splitArray, splitString, sum, tail, take, throttle, toArray, toCamel, toDp, toKebab, toNumber, toOrdinal, toRomanNumerals, truncate, unchars, uniq, uuid, vs };
